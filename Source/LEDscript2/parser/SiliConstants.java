/* Generated By:JJTree&JavaCC: Do not edit this line. SiliConstants.java */
package LEDscript2.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SiliConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int TO = 11;
  /** RegularExpression Id. */
  int FOR = 12;
  /** RegularExpression Id. */
  int WRITE = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int AND = 15;
  /** RegularExpression Id. */
  int NOT = 16;
  /** RegularExpression Id. */
  int TRUE = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int FN = 19;
  /** RegularExpression Id. */
  int RETURN = 20;
  /** RegularExpression Id. */
  int COLOUR = 21;
  /** RegularExpression Id. */
  int RED = 22;
  /** RegularExpression Id. */
  int GREEN = 23;
  /** RegularExpression Id. */
  int BLUE = 24;
  /** RegularExpression Id. */
  int INT = 25;
  /** RegularExpression Id. */
  int BRIGHTEN = 26;
  /** RegularExpression Id. */
  int DARKEN = 27;
  /** RegularExpression Id. */
  int FLIP = 28;
  /** RegularExpression Id. */
  int MULTIPLY = 29;
  /** RegularExpression Id. */
  int DIVIDE = 30;
  /** RegularExpression Id. */
  int DELAY = 31;
  /** RegularExpression Id. */
  int CLEAR = 32;
  /** RegularExpression Id. */
  int FILL = 33;
  /** RegularExpression Id. */
  int UPDATE = 34;
  /** RegularExpression Id. */
  int INFO = 35;
  /** RegularExpression Id. */
  int LEDS = 36;
  /** RegularExpression Id. */
  int SAVE = 37;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 38;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 39;
  /** RegularExpression Id. */
  int HEX_LITERAL = 40;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 41;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 42;
  /** RegularExpression Id. */
  int EXPONENT = 43;
  /** RegularExpression Id. */
  int STRING_LITERAL = 44;
  /** RegularExpression Id. */
  int IDENTIFIER = 45;
  /** RegularExpression Id. */
  int LETTER = 46;
  /** RegularExpression Id. */
  int DIGIT = 47;
  /** RegularExpression Id. */
  int LPAREN = 48;
  /** RegularExpression Id. */
  int RPAREN = 49;
  /** RegularExpression Id. */
  int LBRACE = 50;
  /** RegularExpression Id. */
  int RBRACE = 51;
  /** RegularExpression Id. */
  int LBRACKET = 52;
  /** RegularExpression Id. */
  int RBRACKET = 53;
  /** RegularExpression Id. */
  int SEMICOLON = 54;
  /** RegularExpression Id. */
  int COMMA = 55;
  /** RegularExpression Id. */
  int DOT = 56;
  /** RegularExpression Id. */
  int PP = 57;
  /** RegularExpression Id. */
  int MM = 58;
  /** RegularExpression Id. */
  int ASSIGN = 59;
  /** RegularExpression Id. */
  int PEQ = 60;
  /** RegularExpression Id. */
  int MEQ = 61;
  /** RegularExpression Id. */
  int UEQ = 62;
  /** RegularExpression Id. */
  int EQ = 63;
  /** RegularExpression Id. */
  int GT = 64;
  /** RegularExpression Id. */
  int LT = 65;
  /** RegularExpression Id. */
  int LE = 66;
  /** RegularExpression Id. */
  int GE = 67;
  /** RegularExpression Id. */
  int NE = 68;
  /** RegularExpression Id. */
  int HOOK = 69;
  /** RegularExpression Id. */
  int COLON = 70;
  /** RegularExpression Id. */
  int PLUS = 71;
  /** RegularExpression Id. */
  int SUBT = 72;
  /** RegularExpression Id. */
  int STAR = 73;
  /** RegularExpression Id. */
  int SLASH = 74;
  /** RegularExpression Id. */
  int REM = 75;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"IF\"",
    "\"ELSE\"",
    "\"WHILE\"",
    "\"FOR\"",
    "\"WRITE\"",
    "\"OR\"",
    "\"AND\"",
    "\"NOT\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "\"FN\"",
    "\"RETURN\"",
    "\"COLOUR\"",
    "\"RED\"",
    "\"GREEN\"",
    "\"BLUE\"",
    "\"INT\"",
    "\"BRIGHTEN\"",
    "\"DARKEN\"",
    "\"FLIP\"",
    "\"MULTIPLY\"",
    "\"DIVIDE\"",
    "\"DELAY\"",
    "\"CLEAR\"",
    "\"FILL\"",
    "\"UPDATE\"",
    "\"INFO\"",
    "\"LEDS\"",
    "\"SAVE\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"++\"",
    "\"--\"",
    "\"=\"",
    "\"+=\"",
    "\"-=\"",
    "\"@=\"",
    "\"==\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"<>\"",
  };

}
